#!/bin/python3
# MIT License

# Copyright (c) 2023 Lev Zakharov

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


import argparse
import sys
import csv
import string


class BaseError(Exception):
    pass


class ColumnIdentifierError(BaseError):
    def __init__(self, column):
        msg = f'Invalid column identifier "{column}". Must be non-negative integer or range of non-negative integers separated by "-".'
        super().__init__(msg)


def column_letter(index):
    """Returns the column letter in Excel format."""
    letters = string.ascii_lowercase
    count = len(letters)
    return letters[index % count] * ((index // count) + 1)


class Table:
    def __init__(self, cells):
        self.cells = cells
        self.widths = self.__widths(cells)

    def markdown(
        self,
        center_aligned_columns=None,
        right_aligned_columns=None,
        no_header_row=False,
    ):
        if len(self.cells) == 0:
            return ""

        cells = [[cell.replace("|", r"\|") for cell in row] for row in self.cells]
        widths = self.__widths(cells)

        def ljust_row(row):
            return [cell.ljust(width) for cell, width in zip(row, widths)]

        def format_row(row):
            return "| " + " | ".join(row) + " |"

        rows = [format_row(ljust_row(row)) for row in cells]
        separators = ["-" * width for width in widths]

        if right_aligned_columns is not None:
            for column in right_aligned_columns:
                separators[column] = ("-" * (widths[column] - 1)) + ":"
        if center_aligned_columns is not None:
            for column in center_aligned_columns:
                separators[column] = ":" + ("-" * (widths[column] - 2)) + ":"

        if no_header_row:
            width = len(cells[0])
            rows.insert(0, format_row(ljust_row(self.make_default_headers(width))))

        rows.insert(1, format_row(separators))

        return "\n".join(rows)

    @staticmethod
    def __widths(cells):
        return list(map(max, zip(*[list(map(len, row)) for row in cells])))

    @staticmethod
    def parse_csv(file, delimiter=",", quotechar='"', columns=None):
        reader = csv.reader(file, delimiter=delimiter, quotechar=quotechar)

        if columns is None:
            cells = list(reader)
        else:
            cells = [[row[i] for i in columns if 0 <= i < len(row)] for row in reader]

        return Table(cells)

    @staticmethod
    def make_default_headers(n):
        return tuple(map(column_letter, range(n)))


def main():
    parser = argparse.ArgumentParser(
        description="Parse CSV files into Markdown tables."
    )
    parser.add_argument(
        "files",
        metavar="CSV_FILE",
        type=argparse.FileType("r"),
        nargs="*",
        help="One or more CSV files to parse",
    )
    parser.add_argument(
        "-d",
        "--delimiter",
        metavar="DELIMITER",
        type=str,
        default=",",
        help="delimiter character. Default is ','",
    )
    parser.add_argument(
        "-q",
        "--quotechar",
        metavar="QUOTECHAR",
        type=str,
        default='"',
        help="quotation character. Default is '\"'",
    )
    parser.add_argument(
        "-C",
        "--columns",
        dest="columns",
        type=str,
        default=None,
        help='comma-separated list of column indices or ranges (from zero) to be processed, e.g. "0,3-5,7". Indices out of range will be ignored',
    )
    parser.add_argument(
        "-c",
        "--center-aligned-columns",
        metavar="CENTER_ALIGNED_COLUMNS",
        nargs="*",
        type=int,
        default=[],
        help="column numbers with center alignment (from zero)",
    )
    parser.add_argument(
        "-r",
        "--right-aligned-columns",
        metavar="RIGHT_ALIGNED_COLUMNS",
        nargs="*",
        type=int,
        default=[],
        help="column numbers with right alignment (from zero)",
    )
    parser.add_argument(
        "-H",
        "--no-header-row",
        dest="no_header_row",
        action="store_true",
        help="specify that the input CSV file has no header row. Will create default headers in Excel format (a,b,c,...)",
    )
    args = parser.parse_args()

    try:
        columns = parse_columns(args.columns)
    except BaseError as e:
        parser.error(e)

    for file in [sys.stdin] if not args.files else args.files:
        table = Table.parse_csv(file, args.delimiter, args.quotechar, columns)
        print(
            table.markdown(
                args.center_aligned_columns,
                args.right_aligned_columns,
                args.no_header_row,
            )
        )


def parse_columns(columns):
    if not columns:
        return None

    result = []

    for c in columns.split(","):
        if "-" in c:
            try:
                a, b = map(int, c.split("-", 1))
            except ValueError:
                raise ColumnIdentifierError(c)

            result.extend(range(a, b + 1))
        else:
            if not c.isdecimal():
                raise ColumnIdentifierError(c)

            column = int(c)
            result.append(column)

    return result


if __name__ == "__main__":
    main()
